name: Daily Build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      buildNumber:
        description: 'Build Number'
        required: true
        default: '9999'
      buildYear:
        description: 'Build Year'
        required: true
        default: '2100'
      onlyLatest:
        description: "Only Latest Xcode"
        type: 'boolean'
        required: false
        default: false


env:
  WORKSPACE: ${{ github.workspace }}
  DEVELOPER_DIR: /Applications/Xcode_16.app/Contents/Developer
  BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}
  YEAR: ${{ github.event.inputs.buildYear }}


jobs:
  source-code:
    name: Check out and process source code
    runs-on: macos-12
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: ./tools/GHAction/daily_env.sh
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v4
        with:
          name: SourceCode
          path: ./output


  native:
    needs: source-code
    runs-on: macos-14
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build Native
        run: JAVA_HOME="${JAVA_HOME_17_X64:-$JAVA_HOME_17_arm64}" ./tools/GHAction/build_native.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload Corona Native
        uses: actions/upload-artifact@v4
        with:
          name: Native
          path: ./output

  Xcode-template-matrix-14:
    strategy:
      matrix:
        runner:
          - macos-14
        xcode:
          - Xcode_16
        target:
          - template
          - template-angle
        platform:
          - iphone
          - tvos
    needs: source-code
    runs-on: ${{ matrix.runner }}
    env:
      DEVELOPER_DIR: /Applications/${{ matrix.xcode }}.app/Contents/Developer
      TEMPLATE_TARGET: ${{ matrix.target }}
      TEMPLATE_PLATFORM: ${{ matrix.platform }}
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build templates
        working-directory: ./platform/${{ matrix.platform }}
        run: ./gh_build_templates.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Build templates JSON spec
        run: ./tools/GHAction/generate_xcode_jsons.py
      - name: Upload templates
        uses: actions/upload-artifact@v4
        with:
          name: Templates-${{ matrix.platform }}-${{ matrix.xcode }}-${{ matrix.target }}
          path: ./output

  collect-ios-templates:
    needs:
      - Xcode-template-matrix-14
    runs-on: ubuntu-20.04
    if: (! failure() && ! cancelled())
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Collect templates together
        run: |
          mkdir -p output/iostemplate
          for D in Templates-*
          do
            mv -v "$D/"*.tar.bz output/iostemplate
          done
      - name: Generate template JSON
        run: find Templates-* -name '*_*-SDKs.json' -exec ./tools/GHAction/aggregate_xcode_jsons.py output {} \+
      - name: Upload templates
        uses: actions/upload-artifact@v4
        with:
          name: Collected-ios-templates
          path: ./output


  CoronaCards-Android:
    needs: native
    runs-on: ubuntu-20.04
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v4
      - name: Get Native
        uses: actions/download-artifact@v4
        with:
          name: Native
          path: Native
      - name: Put native in place
        run: |
          tar -xvzf Native/CoronaNative.tar.gz CoronaEnterprise/Corona/android/lib/gradle/Corona.aar
          mv CoronaEnterprise/Corona/android/lib/gradle/Corona.aar ./CoronaCards.aar
          cp platform/android/sdk/AndroidManifest-Cards.xml ./AndroidManifest.xml
          zip -o CoronaCards.aar AndroidManifest.xml
          zip -o CoronaCardsAndroidAAR.zip CoronaCards.aar
          mkdir -p output
          mv CoronaCardsAndroidAAR.zip output/
      - name: Upload Corona Cards Android AAR archive
        uses: actions/upload-artifact@v4
        with:
          name: CoronaCards-Android
          path: ./output


  CoronaCards-iOS:
    needs: source-code
    runs-on: macos-14
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Corona Cards framework for iOS
        working-directory: ./platform/iphone
        run: |
          xcodebuild -scheme CoronaCards.framework -project ratatouille.xcodeproj -configuration Release -sdk iphoneos build -derivedDataPath "$(pwd)/build"
          cd build/Build/Products/Release-iphoneos
          mkdir "${WORKSPACE}/output"
          zip -r -y -o "${WORKSPACE}/output"/CoronaCards.framework.zip CoronaCards.framework
      - name: Upload CoronaCards framework archive
        uses: actions/upload-artifact@v4
        with:
          name: CoronaCards-iOS
          path: ./output


  CoronaCards-iOS-angle:
    needs: source-code
    runs-on: macos-14
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Corona Cards framework for iOS
        working-directory: ./platform/iphone
        run: |
          xcodebuild -scheme CoronaCards-angle.framework -project ratatouille.xcodeproj -configuration Release -sdk iphoneos build -derivedDataPath "$(pwd)/build"
          cd build/Build/Products/Release-iphoneos
          rm -rf CoronaCards.framework
          cp -R CoronaCards-angle.framework/CoronaCards-angle CoronaCards-angle.framework/CoronaCards
          ln -s CoronaCards-angle.framework CoronaCards.framework
          mkdir "${WORKSPACE}/output"
          zip -r -y -o "${WORKSPACE}/output"/CoronaCards-angle.zip CoronaCards-angle.framework CoronaCards.framework
      - name: Upload CoronaCards framework archive
        uses: actions/upload-artifact@v4
        with:
          name: CoronaCards-iOS-angle
          path: ./output

  macOS-Simulator:
    needs:
      - source-code
      - collect-ios-templates
      - native
    if: (! failure() && ! cancelled())
    runs-on: macos-14
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Check for macOS min supported version
        run: exit $( echo  $(cat platform/mac/AppDelegate.mm |  perl -ne 'print for /kosVersionCurrent = @"([0-9.]+)"/') ' < '  $(/usr/bin/xcrun --sdk macosx --show-sdk-version)  | bc )
      - name: Get collected templates
        uses: actions/download-artifact@v4
        with:
          name: Collected-ios-templates
          path: Collected-ios-templates
      - name: Put collected iOS templates in place
        run: cp -Rv Collected-ios-templates/* platform/resources/
      - run: mkdir docs
      - name: Get Sample Code
        uses: actions/checkout@v4
        with:
          repository: coronalabs/samples-coronasdk
          path: docs/SampleCode
      - name: Clean-up docs
        run: rm -rf docs/SampleCode/.git docs/SampleCode/.gitignore
      - name: Get Native
        uses: actions/download-artifact@v4
        with:
          name: Native
          path: Native
      - name: Put JRE in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/jre.macos.tgz -o jre.macos.tgz
      - name: required for appdmg
        run: brew install python-setuptools
      - name: install appdmg
        run: npm install -g appdmg
      - name: install imagemagick
        run: brew install imagemagick gs || true
      - name: freshen icu4c for node
        run: brew upgrade icu4c || brew install icu4c
      - name: Build DMG
        run: ./tools/GHAction/build_dmg.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload macOS Daily build artifact
        uses: actions/upload-artifact@v4
        with:
          name: Simulator-macOS
          path: ./output

  Windows-Simulator:
    needs:
      - source-code
      - native
    runs-on: windows-2022
    steps:
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: |
          7z x SourceCode/corona.tgz
          7z x corona.tar
      - run: ./tools/GHAction/daily_env.sh
        shell: bash
      - run: mkdir -f docs
      - name: Get Sample Code
        uses: actions/checkout@v4
        with:
          repository: coronalabs/samples-coronasdk
          path: docs/SampleCode
      - name: Clean-up docs
        run: rm -rf docs/SampleCode/.git docs/SampleCode/.gitignore
        shell: bash
      - name: Move docs outside the directory
        run: mv docs ../docs
      - name: Get Corona Native
        uses: actions/download-artifact@v4
        with:
          name: Native
          path: Native
      - name: Put native in place
        shell: cmd
        run: |
          mkdir "%WORKSPACE%\platform\windows\Bin"
          cd "%WORKSPACE%\platform\windows\Bin"
          rmdir /s /q "Native"
          tar -xvzf "%WORKSPACE%\Native\CoronaNative.tar.gz"
          rm ._CoronaEnterprise
          mv CoronaEnterprise Native
          del /q /f Native\.*
          del /q /f Native\Icon?
          del /q /f /s Native\Corona\tvos\frameworks\CoronaCards.framework
      - name: Put JRE in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/jre.win32.7z -o jre.win32.7z
          7z x jre.win32.7z -o"platform/windows/Bin" -y
      - name: Put redistributables in place
        shell: bash
        run: |
          curl -sL https://github.com/zero-meta/solar2d_binary_data/releases/download/v1.1/redist.win32.7z -o redist.win32.7z
          7z x redist.win32.7z -o"platform/windows/Bin/redist" -y
      - name: Build Corona Simulator
        shell: cmd
        run: |
          cd platform\windows
          call UpdateFileVersions.bat %BUILD_NUMBER%
          call Build.Tools\VSVars.bat
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          devenv "Corona.SDK.sln" /rebuild "Release|x86"
        env:
          WIN_CERT_PASSWORD: ${{ secrets.WinCertPassword }}
      - name: Copy Simulator
        run: |
          mkdir output
          cp -v ./platform/windows/Bin/Corona.SDK.Installer/Corona.msi output/Corona-$BUILD.msi
        shell: bash
      - name: Upload Widnows Corona artifact
        uses: actions/upload-artifact@v4
        with:
          name: Simulator-Windows
          path: ./output

  release:
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04
    needs:
      - Windows-Simulator
      - macOS-Simulator
      - CoronaCards-Android
      - CoronaCards-iOS
      - CoronaCards-iOS-angle
      - native
    steps:
      - uses: actions/checkout@v4
      - run: ./tools/GHAction/daily_env.sh
      - name: Generate Change Log
        run: |
          git fetch --prune --unshallow
          git fetch origin '+refs/tags/*:refs/tags/*'
          GIT_LOG=$(git log --format='* %s (%h)' --branches=master --ancestry-path $(git describe --tags --abbrev=0 $GITHUB_REF^)..$(git describe --tags --abbrev=0 $GITHUB_REF)) || true
          if [ -n "$GIT_LOG" ]
          then
          GIT_LOG="Changes since previous build:
          $GIT_LOG
          "
          else
          GIT_LOG='See https://github.com/labolado/corona/tree/dev_add_box2d_v3 for details
          '
          fi
          echo 'GIT_LOG<<EOF' >> $GITHUB_ENV
          echo "$GIT_LOG" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "$GIT_LOG"
      - uses: actions/download-artifact@v4
        with:
          name: Simulator-macOS
          path: Simulator-macOS
      - uses: actions/download-artifact@v4
        with:
          name: Simulator-Windows
          path: Simulator-Windows
      - uses: actions/download-artifact@v4
        with:
          name: CoronaCards-iOS
          path: CoronaCards-iOS
      - uses: actions/download-artifact@v4
        with:
          name: CoronaCards-iOS-angle
          path: CoronaCards-iOS-angle
      - uses: actions/download-artifact@v4
        with:
          name: CoronaCards-Android
          path: CoronaCards-Android
      - uses: actions/download-artifact@v4
        with:
          name: Native
          path: Native
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Solar2D ${{ env.YEAR }}.${{ env.BUILD }}
          body: ${{ env.GIT_LOG }}
      - name: Upload Release Asset for macOS Simulator
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Simulator-macOS/Corona-${{ env.YEAR }}.${{ env.BUILD }}.dmg
          asset_name: Solar2D-macOS-${{ env.YEAR }}.${{ env.BUILD }}.dmg
          asset_content_type: application/x-apple-diskimage
      - name: Upload Release Asset for Windows Simulator
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Simulator-Windows/Corona-${{ env.BUILD }}.msi
          asset_name: Solar2D-Windows-${{ env.YEAR }}.${{ env.BUILD }}.msi
          asset_content_type: application/x-msi
      - name: Upload Release Asset Corona Cards iOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./CoronaCards-iOS/CoronaCards.framework.zip
          asset_name: CoronaCards-iOS-${{ env.YEAR }}.${{ env.BUILD }}.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Corona Cards iOS Angle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./CoronaCards-iOS-angle/CoronaCards-angle.zip
          asset_name: CoronaCards-iOS-MetalANGLE-${{ env.YEAR }}.${{ env.BUILD }}.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Corona Cards Android
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./CoronaCards-Android/CoronaCardsAndroidAAR.zip
          asset_name: CoronaCards-Android-${{ env.YEAR }}.${{ env.BUILD }}.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Android Debug Symbols
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Native/AndroidDebugSymbols.zip
          asset_name: AndroidDebugSymbols-${{ env.YEAR }}.${{ env.BUILD }}.zip
          asset_content_type: application/zip
